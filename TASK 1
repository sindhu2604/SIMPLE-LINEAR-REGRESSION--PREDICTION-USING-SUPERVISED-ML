# NAME : SINDHU S
#Data Science & Business Analytics Intern at The Sparks Foundation
#TASK 1 : PREDICTION USING SUPERVISED MACHINE LEARNING
#GRIPJAN2021


# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
%matplotlib inline

# Reading data from remote link
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
print("Data imported successfully")
s_data.head(25)
s_data.shape

#Summerzing the data
s_data.describe()

# Data Visulization in 2-D
s_data.plot(x= 'Hours', y= 'Scores', style= '*', color= 'magenta')
plt.title('Hours vs Scores')
plt.xlabel('Hours studied')
plt.ylabel('Scores Percentage')
plt.grid()
plt.show()

#Dividing the data into attributes(inputs) and labels(outputs).
X = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

#splitting the data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#Training the Algorithm
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
print('Training complete')

#plotting the regression line
line = model.coef_*X+model.intercept_

#plotting for the test data
plt.scatter(X, y)
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.scatter(X,y,color='Red')
plt.plot(X,line, color='Black')
plt.show()

print(model.intercept_)
print(model.coef_)

y_pred = model.predict(X_test)
y_pred

#Testing the data - Hours
print(X_test)
#predicting the scores
y_pred = model.predict(X_test)

#Numerical Comparison of Actual vs Predicted scores
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

#Graphical representation of Actual vs Predicted scores
df.plot(kind='bar',figsize=(8,8))
plt.grid(which='major', linewidth='0.4', color='magenta')
plt.grid(which='minor', linewidth='0.4', color='blue')
plt.show

#what will be the predicted score if a student studies for 9.25hrs/day?
hours = 9.25
own_pred= model.predict([[hours]])
print("No of Hours ={}".format(hours))
print("Predicted score ={}".format(own_pred[0]))
